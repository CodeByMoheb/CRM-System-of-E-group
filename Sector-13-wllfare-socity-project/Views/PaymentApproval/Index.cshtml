@model List<Sector_13_Welfare_Society___Digital_Management_System.Models.PaymentRecord>

@{
    ViewData["Title"] = "Payment Approvals";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<style>
    .payment-approval-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        margin-bottom: 25px;
        overflow: hidden;
        transition: all 0.3s ease;
        border: 1px solid #e9ecef;
    }
    
    .payment-approval-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0,0,0,0.15);
    }
    
    .payment-header {
        background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
        color: white;
        padding: 25px 30px;
        position: relative;
        overflow: hidden;
    }
    
    .payment-header::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        animation: float 6s ease-in-out infinite;
    }
    
    .payment-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 8px;
        position: relative;
        z-index: 2;
    }
    
    .payment-subtitle {
        font-size: 1rem;
        opacity: 0.9;
        position: relative;
        z-index: 2;
    }
    
    .payment-body {
        padding: 30px;
    }
    
    .payment-details {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 25px;
    }
    
    .detail-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        padding: 8px 0;
        border-bottom: 1px solid #e9ecef;
    }
    
    .detail-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }
    
    .detail-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.9rem;
    }
    
    .detail-value {
        color: #212529;
        font-weight: 500;
    }
    
    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .status-pending { 
        background: linear-gradient(135deg, #ffc107, #fd7e14); 
        color: white; 
    }
    
    .status-approved { 
        background: linear-gradient(135deg, #28a745, #20c997); 
        color: white; 
    }
    
    .status-rejected { 
        background: linear-gradient(135deg, #dc3545, #e83e8c); 
        color: white; 
    }
    
    .amount-display {
        font-size: 1.5rem;
        font-weight: 700;
        color: #ffc107;
    }
    
    .action-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .btn-approve {
        background: linear-gradient(135deg, #28a745, #20c997);
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .btn-approve:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
        color: white;
        text-decoration: none;
    }
    
    .btn-reject {
        background: linear-gradient(135deg, #dc3545, #e83e8c);
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .btn-reject:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
        color: white;
        text-decoration: none;
    }
    
    .btn-details {
        background: linear-gradient(135deg, #667eea, #764ba2);
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .btn-details:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        color: white;
        text-decoration: none;
    }
    
    .summary-card {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        border: 1px solid #dee2e6;
    }
    
    .summary-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #495057;
        margin-bottom: 20px;
        text-align: center;
    }
    
    .summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }
    
    .stat-item {
        text-align: center;
        padding: 15px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #ffc107;
        margin-bottom: 5px;
    }
    
    .stat-label {
        font-size: 0.9rem;
        color: #6c757d;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .no-payments {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 15px;
        margin: 30px 0;
    }
    
    .no-payments-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 20px;
    }
    
    .no-payments h4 {
        color: #6c757d;
        margin-bottom: 15px;
        font-weight: 600;
    }
    
    .no-payments p {
        color: #adb5bd;
        margin-bottom: 25px;
    }
    
    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }
    
    @@media (max-width: 768px) {
        .payment-body {
            padding: 20px;
        }
        
        .action-buttons {
            flex-direction: column;
        }
        
        .btn-approve, .btn-reject, .btn-details {
            justify-content: center;
        }
        
        .summary-stats {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="container-fluid py-4">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">
            <i class="fas fa-credit-card me-2" style="color: #ffc107;"></i>
            Payment Approvals
        </h1>
        <div class="btn-group">
            <a href="@Url.Action("History")" class="btn btn-outline-secondary">
                <i class="fas fa-history"></i> Approval History
            </a>
        </div>
    </div>

    <!-- Payment Summary -->
    <div class="summary-card">
        <h3 class="summary-title">
            <i class="fas fa-chart-pie me-2"></i>
            Approval Summary
        </h3>
        <div class="summary-stats">
            <div class="stat-item">
                <div class="stat-number">@Model.Count</div>
                <div class="stat-label">Pending Approvals</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" style="color: #28a745;">@Model.Count(p => p.ApprovalStatus == "Approved")</div>
                <div class="stat-label">Approved Today</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" style="color: #ffc107;">$@Model.Sum(p => p.Amount).ToString("F2")</div>
                <div class="stat-label">Total Amount</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" style="color: #17a2b8;">@Model.Count(p => p.PaymentMethod == "Bank Transfer")</div>
                <div class="stat-label">Bank Transfers</div>
            </div>
        </div>
    </div>

    <!-- Payment Approval Cards -->
    @if (Model.Any())
    {
        @foreach (var payment in Model)
        {
            <div class="payment-approval-card">
                <!-- Payment Header -->
                <div class="payment-header">
                    <h3 class="payment-title">
                        <i class="fas fa-credit-card me-2"></i>
                        Payment #@payment.Id.ToString("D6")
                    </h3>
                    <p class="payment-subtitle">@payment.PaymentMethod - @payment.CreatedAt.ToString("MMMM dd, yyyy")</p>
                </div>

                <!-- Payment Body -->
                <div class="payment-body">
                    <!-- Payment Details -->
                    <div class="payment-details">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="detail-row">
                                    <span class="detail-label">Payment ID:</span>
                                    <span class="detail-value">#@payment.Id.ToString("D6")</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-label">Customer:</span>
                                    <span class="detail-value">@payment.CustomerName</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-label">Email:</span>
                                    <span class="detail-value">@payment.CustomerEmail</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-label">Phone:</span>
                                    <span class="detail-value">@payment.CustomerPhone</span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-row">
                                    <span class="detail-label">Amount:</span>
                                    <span class="detail-value amount-display">$@payment.Amount.ToString("F2")</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-label">Status:</span>
                                    <span class="status-badge status-@payment.ApprovalStatus.ToLower()">@payment.ApprovalStatus</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-label">Payment Method:</span>
                                    <span class="detail-value">@payment.PaymentMethod</span>
                                </div>
                                <div class="detail-row">
                                    <span class="detail-label">Transaction ID:</span>
                                    <span class="detail-value">@(payment.TransactionId ?? "N/A")</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <a href="@Url.Action("Details", new { id = payment.Id })" class="btn-details">
                            <i class="fas fa-eye"></i> View Details
                        </a>
                        
                        <button onclick="approvePayment(@payment.Id)" class="btn-approve">
                            <i class="fas fa-check"></i> Approve Payment
                        </button>
                        
                        <button onclick="rejectPayment(@payment.Id)" class="btn-reject">
                            <i class="fas fa-times"></i> Reject Payment
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-payments">
            <i class="fas fa-credit-card no-payments-icon"></i>
            <h4>No Pending Approvals</h4>
            <p>There are currently no payments waiting for approval. All payment approvals are up to date.</p>
        </div>
    }
</div>

<!-- Approval Modal -->
<div class="modal fade" id="approvalModal" tabindex="-1" aria-labelledby="approvalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approvalModalLabel">Approve Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="approvalForm">
                    <input type="hidden" id="paymentId" name="paymentId" />
                    <div class="mb-3">
                        <label for="approvalNotes" class="form-label">Approval Notes (Optional)</label>
                        <textarea class="form-control" id="approvalNotes" name="notes" rows="3" placeholder="Add any notes about this approval..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="confirmApproval()">Approve Payment</button>
            </div>
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectionModal" tabindex="-1" aria-labelledby="rejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectionModalLabel">Reject Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rejectionForm">
                    <input type="hidden" id="rejectPaymentId" name="paymentId" />
                    <div class="mb-3">
                        <label for="rejectionReason" class="form-label">Rejection Reason *</label>
                        <textarea class="form-control" id="rejectionReason" name="reason" rows="3" placeholder="Please provide a reason for rejection..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmRejection()">Reject Payment</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function approvePayment(paymentId) {
            document.getElementById('paymentId').value = paymentId;
            document.getElementById('approvalNotes').value = '';
            new bootstrap.Modal(document.getElementById('approvalModal')).show();
        }

        function rejectPayment(paymentId) {
            document.getElementById('rejectPaymentId').value = paymentId;
            document.getElementById('rejectionReason').value = '';
            new bootstrap.Modal(document.getElementById('rejectionModal')).show();
        }

        function confirmApproval() {
            const paymentId = document.getElementById('paymentId').value;
            const notes = document.getElementById('approvalNotes').value;
            
            fetch('@Url.Action("Approve")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `id=${paymentId}&notes=${encodeURIComponent(notes)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                alert('An error occurred while approving the payment.');
            });
        }

        function confirmRejection() {
            const paymentId = document.getElementById('rejectPaymentId').value;
            const reason = document.getElementById('rejectionReason').value;
            
            if (!reason.trim()) {
                alert('Please provide a reason for rejection.');
                return;
            }
            
            fetch('@Url.Action("Reject")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `id=${paymentId}&reason=${encodeURIComponent(reason)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                alert('An error occurred while rejecting the payment.');
            });
        }
    </script>
}
