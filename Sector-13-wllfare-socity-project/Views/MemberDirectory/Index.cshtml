@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
    ViewData["Title"] = "Member Directory";
}

<div class="container-fluid py-3">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h3 class="mb-0">Member Directory</h3>
        <div class="text-muted">Buyers and Clients</div>
    </div>

    <ul class="nav nav-pills mb-3" id="mdTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active text-danger" id="buyers-tab" data-bs-toggle="pill" data-bs-target="#buyers" type="button" role="tab" aria-controls="buyers" aria-selected="true">Buyers</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link text-danger" id="clients-tab" data-bs-toggle="pill" data-bs-target="#clients" type="button" role="tab" aria-controls="clients" aria-selected="false">Clients</button>
        </li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane fade show active" id="buyers" role="tabpanel" aria-labelledby="buyers-tab">
            <div class="card p-3 mb-3">
                <form id="buyerForm" class="row g-3" novalidate>
                    <input type="hidden" name="id" />
                    <div class="col-12 col-md-4">
                        <label class="form-label">Country</label>
                        <input class="form-control" name="country" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Buyer name</label>
                        <input class="form-control" name="name" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Address</label>
                        <input class="form-control" name="address" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Contact person</label>
                        <input class="form-control" name="contactPerson" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Designation</label>
                        <input class="form-control" name="designation" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" name="email" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Phone (optional)</label>
                        <input class="form-control" name="phone" />
                    </div>
                    <div class="col-12 d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="reset" class="btn btn-outline-secondary">Clear</button>
                    </div>
                </form>
            </div>
            <div class="card p-0">
                <!-- Desktop Table View -->
                <div class="table-responsive d-none d-lg-block">
                    <table class="table table-hover mb-0" id="buyersTable">
                        <thead class="table-light">
                            <tr>
                                <th>Country</th>
                                <th>Buyer name</th>
                                <th>Address</th>
                                <th>Contact person</th>
                                <th>Designation</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                
                <!-- Mobile Card View -->
                <div class="d-lg-none" id="buyersCards">
                    <!-- Cards will be populated by JavaScript -->
                </div>
                
                <!-- Pagination for Buyers -->
                <div class="card-footer bg-light border-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted" id="buyersInfo">
                            Showing 0-0 of 0 entries
                        </div>
                        <nav aria-label="Buyers pagination">
                            <ul class="pagination pagination-sm mb-0" id="buyersPagination">
                                <!-- Pagination buttons will be generated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="clients" role="tabpanel" aria-labelledby="clients-tab">
            <div class="card p-3 mb-3">
                <form id="clientForm" class="row g-3" novalidate>
                    <input type="hidden" name="id" />
                    <div class="col-12 col-md-4">
                        <label class="form-label">Country</label>
                        <input class="form-control" name="country" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Factory name</label>
                        <input class="form-control" name="name" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Address</label>
                        <input class="form-control" name="address" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Contact person</label>
                        <input class="form-control" name="contactPerson" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Designation</label>
                        <input class="form-control" name="designation" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" name="email" required />
                    </div>
                    <div class="col-12 col-md-4">
                        <label class="form-label">Phone (optional)</label>
                        <input class="form-control" name="phone" />
                    </div>
                    <div class="col-12 d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="reset" class="btn btn-outline-secondary">Clear</button>
                    </div>
                </form>
            </div>
            <div class="card p-0">
                <!-- Desktop Table View -->
                <div class="table-responsive d-none d-lg-block">
                    <table class="table table-hover mb-0" id="clientsTable">
                        <thead class="table-light">
                            <tr>
                                <th>Country</th>
                                <th>Factory name</th>
                                <th>Address</th>
                                <th>Contact person</th>
                                <th>Designation</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                
                <!-- Mobile Card View -->
                <div class="d-lg-none" id="clientsCards">
                    <!-- Cards will be populated by JavaScript -->
                </div>
                
                <!-- Pagination for Clients -->
                <div class="card-footer bg-light border-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted" id="clientsInfo">
                            Showing 0-0 of 0 entries
                        </div>
                        <nav aria-label="Clients pagination">
                            <ul class="pagination pagination-sm mb-0" id="clientsPagination">
                                <!-- Pagination buttons will be generated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Mobile responsive enhancements */
        @@media (max-width: 991.98px) {
            .container-fluid {
                padding-left: 15px;
                padding-right: 15px;
            }
            
            .card-body {
                padding: 1rem;
            }
            
            .nav-pills .nav-link {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .btn-group-sm > .btn, .btn-sm {
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
            }
        }
        
        /* Card hover effects */
        .card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
        }
        
        /* Dropdown styling */
        .dropdown-menu {
            border: none;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .dropdown-item {
            padding: 0.5rem 1rem;
            transition: background-color 0.2s ease;
        }
        
        .dropdown-item:hover {
            background-color: rgba(0,123,255,0.1);
        }
        
        /* Form responsiveness */
        @@media (max-width: 767.98px) {
            .col-md-4 {
                margin-bottom: 0.5rem;
            }
        }
        
        /* Empty state styling */
        .text-muted i {
            opacity: 0.5;
        }
        
        /* Pagination styling */
        .pagination {
            margin-bottom: 0;
        }
        
        .pagination .page-link {
            border: 1px solid #dee2e6;
            color: #6c757d;
            padding: 0.375rem 0.75rem;
            transition: all 0.2s ease;
        }
        
        .pagination .page-link:hover {
            background-color: #e9ecef;
            border-color: #adb5bd;
            color: #495057;
        }
        
        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
            color: #fff;
        }
        
        .pagination .page-item.disabled .page-link {
            color: #6c757d;
            background-color: #fff;
            border-color: #dee2e6;
            cursor: not-allowed;
        }
        
        .card-footer {
            padding: 0.75rem 1rem;
            background-color: #f8f9fa !important;
        }
        
        /* Mobile pagination adjustments */
        @@media (max-width: 576px) {
            .pagination {
                justify-content: center;
            }
            
            .pagination .page-link {
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
            }
            
            .card-footer .d-flex {
                flex-direction: column;
                gap: 0.5rem;
                text-align: center;
            }
        }
    </style>
    <script>
        function toRow(item, type){
            const emailLink = item.email ? `<a href="mailto:${item.email}">${item.email}</a>` : '';
            return `<tr data-id="${item.id}">
                <td>${item.country ?? ''}</td>
                <td>${item.name ?? ''}</td>
                <td>${item.address ?? ''}</td>
                <td>${item.contactPerson ?? ''}</td>
                <td>${item.designation ?? ''}</td>
                <td>${emailLink}</td>
                <td>${item.phone ?? ''}</td>
                <td class="text-end">
                    <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="editItem('${type}', '${item.id}')">Edit</button>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteItem('${type}', '${item.id}')">Delete</button>
                </td>
            </tr>`;
        }

        function toCard(item, type){
            const emailLink = item.email ? `<a href="mailto:${item.email}" class="text-decoration-none">${item.email}</a>` : '<span class="text-muted">Not provided</span>';
            const phoneDisplay = item.phone || '<span class="text-muted">Not provided</span>';
            const nameLabel = type === 'buyer' ? 'Buyer name' : 'Factory name';
            
            return `<div class="card mb-3 shadow-sm" data-id="${item.id}">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h6 class="card-title mb-0 text-primary">${item.name ?? 'Unnamed'}</h6>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                Actions
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#" onclick="editItem('${type}', '${item.id}')"><i class="fas fa-edit me-2"></i>Edit</a></li>
                                <li><a class="dropdown-item text-danger" href="#" onclick="deleteItem('${type}', '${item.id}')"><i class="fas fa-trash me-2"></i>Delete</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="row g-2">
                        <div class="col-6">
                            <small class="text-muted d-block">Country</small>
                            <span>${item.country ?? 'Not specified'}</span>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Contact Person</small>
                            <span>${item.contactPerson ?? 'Not specified'}</span>
                        </div>
                        <div class="col-12">
                            <small class="text-muted d-block">Address</small>
                            <span>${item.address ?? 'Not specified'}</span>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Designation</small>
                            <span>${item.designation ?? 'Not specified'}</span>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Phone</small>
                            <span>${phoneDisplay}</span>
                        </div>
                        <div class="col-12">
                            <small class="text-muted d-block">Email</small>
                            <span>${emailLink}</span>
                        </div>
                    </div>
                </div>
            </div>`;
        }

        // Pagination configuration
        const ITEMS_PER_PAGE = 50;
        let buyersData = [];
        let clientsData = [];
        let currentBuyersPage = 1;
        let currentClientsPage = 1;

        function normalize(data){
            if (Array.isArray(data)) return data;
            if (data && Array.isArray(data.value)) return data.value; // fallback for some serializers
            return [];
        }

        function paginate(array, page, itemsPerPage) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            return {
                data: array.slice(startIndex, endIndex),
                totalPages: Math.ceil(array.length / itemsPerPage),
                totalItems: array.length,
                currentPage: page,
                startIndex: startIndex + 1,
                endIndex: Math.min(endIndex, array.length)
            };
        }

        function generatePagination(containerId, currentPage, totalPages, onPageClick) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            let html = '';
            
            // Previous button
            html += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}" ${currentPage === 1 ? 'tabindex="-1"' : ''}>
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>`;
            
            // Page numbers
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            if (startPage > 1) {
                html += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
                if (startPage > 2) {
                    html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }
            
            for (let i = startPage; i <= endPage; i++) {
                html += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>`;
            }
            
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
                html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
            }
            
            // Next button
            html += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}" ${currentPage === totalPages ? 'tabindex="-1"' : ''}>
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>`;
            
            container.innerHTML = html;
            
            // Add click events
            container.querySelectorAll('a.page-link[data-page]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const page = parseInt(this.getAttribute('data-page'));
                    if (page && page !== currentPage) {
                        onPageClick(page);
                    }
                });
            });
        }

        function updateInfo(infoId, paginationResult) {
            const infoElement = document.getElementById(infoId);
            if (infoElement && paginationResult.totalItems > 0) {
                infoElement.textContent = `Showing ${paginationResult.startIndex}-${paginationResult.endIndex} of ${paginationResult.totalItems} entries`;
            } else if (infoElement) {
                infoElement.textContent = 'No entries found';
            }
        }

        function loadBuyers(page = 1) {
            $.getJSON('@Url.Content("/MemberDirectory/BuyersJson")')
                .done(function(data){
                    buyersData = normalize(data);
                    currentBuyersPage = page;
                    renderBuyers();
                })
                .fail(function(xhr){
                    const msg = xhr.responseJSON?.detail || xhr.responseText || 'Buyers load failed';
                    alert(msg);
                });
        }

        function loadClients(page = 1) {
            $.getJSON('@Url.Content("/MemberDirectory/ClientsJson")')
                .done(function(data){
                    clientsData = normalize(data);
                    currentClientsPage = page;
                    renderClients();
                })
                .fail(function(xhr){
                    const msg = xhr.responseJSON?.detail || xhr.responseText || 'Clients load failed';
                    alert(msg);
                });
        }

        function renderBuyers() {
            const paginationResult = paginate(buyersData, currentBuyersPage, ITEMS_PER_PAGE);
            const rows = paginationResult.data.map(x => toRow(x, 'buyer')).join('');
            const cards = paginationResult.data.map(x => toCard(x, 'buyer')).join('');
            
            $('#buyersTable tbody').html(rows || '<tr><td colspan="8" class="text-center text-muted p-3">No buyers found.</td></tr>');
            $('#buyersCards').html(cards || '<div class="p-4 text-center text-muted"><i class="fas fa-users fa-3x mb-3 d-block"></i>No buyers found.</div>');
            
            updateInfo('buyersInfo', paginationResult);
            generatePagination('buyersPagination', currentBuyersPage, paginationResult.totalPages, loadBuyers);
        }

        function renderClients() {
            const paginationResult = paginate(clientsData, currentClientsPage, ITEMS_PER_PAGE);
            const rows = paginationResult.data.map(x => toRow(x, 'client')).join('');
            const cards = paginationResult.data.map(x => toCard(x, 'client')).join('');
            
            $('#clientsTable tbody').html(rows || '<tr><td colspan="8" class="text-center text-muted p-3">No clients found.</td></tr>');
            $('#clientsCards').html(cards || '<div class="p-4 text-center text-muted"><i class="fas fa-building fa-3x mb-3 d-block"></i>No clients found.</div>');
            
            updateInfo('clientsInfo', paginationResult);
            generatePagination('clientsPagination', currentClientsPage, paginationResult.totalPages, loadClients);
        }

        function loadTables(){
            loadBuyers(1);
            loadClients(1);
        }

        function collectForm($form){
            const payload = Object.fromEntries($form.serializeArray().map(x => [x.name, x.value?.trim()]));
            if (!payload.id) delete payload.id;
            return payload;
        }

        function fillForm($form, item){
            $form.find('[name="id"]').val(item.id);
            $form.find('[name="country"]').val(item.country);
            $form.find('[name="name"]').val(item.name);
            $form.find('[name="address"]').val(item.address);
            $form.find('[name="contactPerson"]').val(item.contactPerson);
            $form.find('[name="designation"]').val(item.designation);
            $form.find('[name="email"]').val(item.email);
            $form.find('[name="phone"]').val(item.phone);
        }

        function editItem(type, id){
            if (type === 'buyer') {
                const item = buyersData.find(x => x.id === id);
                if (!item) {
                    // Fallback to server if not found in current data
                    $.getJSON('@Url.Content("/MemberDirectory/BuyersJson")', function(list){
                        const serverItem = list.find(x => x.id === id);
                        if (!serverItem) return alert('Record not found');
                        fillForm($('#buyerForm'), serverItem);
                        new bootstrap.Tab(document.querySelector('#buyers-tab')).show();
                    });
                } else {
                    fillForm($('#buyerForm'), item);
                    new bootstrap.Tab(document.querySelector('#buyers-tab')).show();
                }
            } else {
                const item = clientsData.find(x => x.id === id);
                if (!item) {
                    // Fallback to server if not found in current data
                    $.getJSON('@Url.Content("/MemberDirectory/ClientsJson")', function(data){
                        const list = normalize(data);
                        const serverItem = list.find(x => x.id === id);
                        if (!serverItem) return alert('Record not found');
                        fillForm($('#clientForm'), serverItem);
                        new bootstrap.Tab(document.querySelector('#clients-tab')).show();
                    });
                } else {
                    fillForm($('#clientForm'), item);
                    new bootstrap.Tab(document.querySelector('#clients-tab')).show();
                }
            }
        }

        function deleteItem(type, id){
            if (!confirm('Are you sure you want to delete this record?')) {
                return;
            }
            
            const url = type === 'buyer' ? '@Url.Action("DeleteBuyer","MemberDirectory")' : '@Url.Action("DeleteClient","MemberDirectory")';
            $.ajax({ url: url + '?id=' + id, type: 'DELETE' })
                .done(function() {
                    if (type === 'buyer') {
                        loadBuyers(currentBuyersPage);
                    } else {
                        loadClients(currentClientsPage);
                    }
                })
                .fail(x => alert('Delete failed'));
        }

        $(function(){
            loadTables();

            $('#buyerForm').on('submit', function(e){
                e.preventDefault();
                const payload = collectForm($(this));
                $.ajax({
                    url: '@Url.Action("SaveBuyer","MemberDirectory")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload)
                }).done(function(){
                    $('#buyerForm')[0].reset();
                    loadBuyers(currentBuyersPage);
                }).fail(function(xhr){
                    const msg = xhr.responseJSON?.detail || xhr.responseText || 'Save failed';
                    alert(msg);
                });
            });

            $('#clientForm').on('submit', function(e){
                e.preventDefault();
                const payload = collectForm($(this));
                $.ajax({
                    url: '@Url.Action("SaveClient","MemberDirectory")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload)
                }).done(function(){
                    $('#clientForm')[0].reset();
                    loadClients(currentClientsPage);
                }).fail(function(xhr){
                    const msg = xhr.responseJSON?.detail || xhr.responseText || 'Save failed';
                    alert(msg);
                });
            });
        });
    </script>
}


