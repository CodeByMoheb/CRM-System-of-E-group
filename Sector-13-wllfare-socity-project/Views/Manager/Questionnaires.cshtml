@model ManagerQuestionnaireViewModel

@{
    ViewData["Title"] = "Manage Audit Questionnaires";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 text-gray-800">
                    <i class="fas fa-question-circle me-2"></i>Audit Questionnaires Management
                </h1>
                <div class="btn-group">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createQuestionModal">
                        <i class="fas fa-plus me-2"></i>Add Question
                    </button>
                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#bulkCreateModal">
                        <i class="fas fa-layer-group me-2"></i>Bulk Create
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Questions
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalQuestions</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-question fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Active Questions
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.ActiveQuestions</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Categories
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.Categories.Count</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-folder fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Services Covered
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.Services.Count</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-cogs fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Filter -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-outline-primary active" onclick="filterByCategory('all')">
                                    All Categories
                                </button>
                                @foreach (var category in Model.Categories)
                                {
                                    <button type="button" class="btn btn-outline-primary" onclick="filterByCategory('@category')">
                                        @category (@Model.QuestionsByCategory.GetValueOrDefault(category, 0))
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="input-group" style="max-width: 300px; margin-left: auto;">
                                <input type="text" class="form-control" id="searchInput" placeholder="Search questions...">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Questions List -->
    <div class="row">
        <div class="col-12">
            @if (Model.Questions.Any())
            {
                var groupedQuestions = Model.Questions.GroupBy(q => q.Category).OrderBy(g => g.Key);
                
                @foreach (var categoryGroup in groupedQuestions)
                {
                    <div class="card shadow mb-4 category-group" data-category="@categoryGroup.Key">
                        <div class="card-header py-3 d-flex justify-content-between align-items-center">
                            <h6 class="m-0 font-weight-bold text-primary">
                                <i class="fas fa-folder me-2"></i>@categoryGroup.Key (@categoryGroup.Count() questions)
                            </h6>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="toggleCategory('@categoryGroup.Key')">
                                    <i class="fas fa-eye me-1"></i>Toggle
                                </button>
                            </div>
                        </div>
                        <div class="card-body category-content" id="category-@categoryGroup.Key.Replace(" ", "-")">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th style="width: 50px;">#</th>
                                            <th>Question</th>
                                            <th style="width: 150px;">Service</th>
                                            <th style="width: 100px;">Status</th>
                                            <th style="width: 150px;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody class="sortable-questions" data-category="@categoryGroup.Key">
                                        @foreach (var question in categoryGroup.OrderBy(q => q.SortOrder))
                                        {
                                            <tr class="question-row" data-question-id="@question.Id" data-category="@question.Category">
                                                <td>
                                                    <span class="drag-handle text-muted">
                                                        <i class="fas fa-grip-vertical"></i>
                                                    </span>
                                                    @question.SortOrder
                                                </td>
                                                <td class="question-text">
                                                    <strong>@question.QuestionText</strong>
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        @(question.Service?.Name ?? "All Services")
                                                    </small>
                                                </td>
                                                <td>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input status-toggle" 
                                                               type="checkbox" 
                                                               @(question.IsActive ? "checked" : "")
                                                               data-question-id="@question.Id">
                                                        <label class="form-check-label">
                                                            <small class="badge badge-@(question.IsActive ? "success" : "secondary")">
                                                                @(question.IsActive ? "Active" : "Inactive")
                                                            </small>
                                                        </label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="btn-group">
                                                        <a href="@Url.Action("EditQuestion", new { id = question.Id })" 
                                                           class="btn btn-sm btn-outline-primary">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                                onclick="deleteQuestion(@question.Id)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="card shadow">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-question-circle fa-4x text-gray-300 mb-3"></i>
                        <h4 class="text-gray-600">No Questions Created</h4>
                        <p class="text-gray-500 mb-4">Start by creating your first audit question.</p>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createQuestionModal">
                            <i class="fas fa-plus me-2"></i>Create First Question
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Question Modal -->
<div class="modal fade" id="createQuestionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CreateQuestion" method="post">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Question Text *</label>
                            <textarea name="QuestionText" class="form-control" rows="3" 
                                      placeholder="Enter the audit question..." required></textarea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Category *</label>
                            <input list="categories" name="Category" class="form-control" 
                                   placeholder="Enter or select category" required>
                            <datalist id="categories">
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category"></option>
                                }
                                <option value="Documentation"></option>
                                <option value="Process Compliance"></option>
                                <option value="Safety & Security"></option>
                                <option value="Quality Control"></option>
                                <option value="Training & Competency"></option>
                                <option value="Equipment & Tools"></option>
                                <option value="Environmental Impact"></option>
                            </datalist>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Service (Optional)</label>
                            <select name="ServiceId" class="form-control">
                                <option value="">All Services</option>
                                @foreach (var service in Model.Services)
                                {
                                    <option value="@service.Id">@service.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Question</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Create Modal -->
<div class="modal fade" id="bulkCreateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bulk Create Questions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CreateBulkQuestions" method="post">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        Enter each question on a separate line. All questions will be created in the same category.
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Category *</label>
                            <input list="categories" name="SelectedCategory" class="form-control" 
                                   placeholder="Enter or select category" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Service (Optional)</label>
                            <select name="SelectedServiceId" class="form-control">
                                <option value="">All Services</option>
                                @foreach (var service in Model.Services)
                                {
                                    <option value="@service.Id">@service.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Questions (one per line) *</label>
                        <textarea name="BulkQuestions" class="form-control" rows="10" 
                                  placeholder="Are all required documents properly maintained and up to date?
Is the workspace clean and organized according to standards?
Are safety protocols being followed by all team members?
Is equipment calibrated and functioning within acceptable parameters?
Are staff properly trained on current procedures?
..." required></textarea>
                        <small class="text-muted">Each line will become a separate question</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Create Questions</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script>
        // Initialize sortable for each category
        document.querySelectorAll('.sortable-questions').forEach(function(el) {
            new Sortable(el, {
                handle: '.drag-handle',
                animation: 150,
                onEnd: function(evt) {
                    updateQuestionOrder(evt.to);
                }
            });
        });

        // Filter by category
        function filterByCategory(category) {
            document.querySelectorAll('.btn-outline-primary').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            document.querySelectorAll('.category-group').forEach(group => {
                if (category === 'all' || group.dataset.category === category) {
                    group.style.display = 'block';
                } else {
                    group.style.display = 'none';
                }
            });
        }

        // Toggle category visibility
        function toggleCategory(category) {
            const content = document.getElementById('category-' + category.replace(/\s+/g, '-'));
            content.style.display = content.style.display === 'none' ? 'block' : 'none';
        }

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            document.querySelectorAll('.question-row').forEach(row => {
                const questionText = row.querySelector('.question-text').textContent.toLowerCase();
                row.style.display = questionText.includes(searchTerm) ? '' : 'none';
            });
        });

        // Toggle question status
        document.querySelectorAll('.status-toggle').forEach(toggle => {
            toggle.addEventListener('change', function() {
                const questionId = this.dataset.questionId;
                
                fetch('@Url.Action("ToggleQuestionStatus")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify(questionId)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const badge = this.parentElement.querySelector('.badge');
                        badge.textContent = data.isActive ? 'Active' : 'Inactive';
                        badge.className = 'badge badge-' + (data.isActive ? 'success' : 'secondary');
                    }
                });
            });
        });

        // Update question order
        function updateQuestionOrder(container) {
            const questionIds = Array.from(container.children).map(row => 
                parseInt(row.dataset.questionId)
            );
            
            fetch('@Url.Action("UpdateQuestionOrder")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(questionIds)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update sort order numbers in UI
                    container.children.forEach((row, index) => {
                        row.children[0].textContent = (index + 1);
                    });
                }
            });
        }

        // Delete question
        function deleteQuestion(questionId) {
            if (!confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
                return;
            }
            
            fetch('@Url.Action("DeleteQuestion")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(questionId)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                }
            });
        }
    </script>
}

<style>
    .drag-handle {
        cursor: move;
    }
    
    .sortable-ghost {
        opacity: 0.4;
    }
    
    .question-row:hover {
        background-color: #f8f9fa;
    }
    
    .category-content {
        max-height: 600px;
        overflow-y: auto;
    }
    
    .btn-group .btn {
        border-radius: 0.375rem;
        margin-right: 0.25rem;
    }
</style>