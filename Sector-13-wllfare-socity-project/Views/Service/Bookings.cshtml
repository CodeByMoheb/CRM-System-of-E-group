@model Sector_13_Welfare_Society___Digital_Management_System.Models.BookingListViewModel
@{
    ViewData["Title"] = "Booking Management";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-calendar-check me-2"></i>Booking Management
                    </h4>
                    <div>
                        <span class="badge bg-light text-dark me-2">Total: @Model.TotalBookings</span>
                        <span class="badge bg-success me-2">Confirmed: @Model.ConfirmedBookings</span>
                        <span class="badge bg-warning me-2">Pending: @Model.PendingBookings</span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Filter Section -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <label for="statusFilter" class="form-label">Filter by Status</label>
                            <select id="statusFilter" class="form-select">
                                <option value="">All Statuses</option>
                                <option value="Pending">Pending</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="paymentFilter" class="form-label">Filter by Payment</label>
                            <select id="paymentFilter" class="form-select">
                                <option value="">All Payments</option>
                                <option value="Pending">Pending</option>
                                <option value="Paid">Paid</option>
                                <option value="Failed">Failed</option>
                                <option value="Pending Verification">Pending Verification</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="dateFilter" class="form-label">Filter by Date</label>
                            <input type="date" id="dateFilter" class="form-control">
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-primary me-2" onclick="applyFilters()">
                                <i class="fas fa-filter me-1"></i>Apply Filters
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">
                                <i class="fas fa-times me-1"></i>Clear
                            </button>
                        </div>
                    </div>

                    <!-- Bookings Table -->
                    <div class="table-responsive">
                        <table class="table table-hover" id="bookingsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>Booking #</th>
                                    <th>Customer</th>
                                    <th>Service</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Payment</th>
                                    <th>Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var booking in Model.Bookings)
                                {
                                    <tr data-status="@booking.BookingStatus" data-payment="@booking.PaymentStatus" data-date="@booking.BookingDate.ToString("yyyy-MM-dd")">
                                        <td>
                                            <strong>@booking.BookingNumber</strong>
                                        </td>
                                        <td>
                                            <div>
                                                <strong>@booking.CustomerName</strong><br>
                                                <small class="text-muted">@booking.CustomerEmail</small><br>
                                                <small class="text-muted">@booking.CustomerPhone</small>
                                            </div>
                                        </td>
                                        <td>
                                            @foreach (var item in booking.BookingItems)
                                            {
                                                <div class="mb-1">
                                                    <strong>@item.ServiceName</strong><br>
                                                    <small class="text-muted">@item.ServiceType</small>
                                                    @if (item.WorkforceSize.HasValue)
                                                    {
                                                        <br><small class="text-info">@item.WorkforceSize workers</small>
                                                    }
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            <strong>@booking.Currency @booking.TotalAmount.ToString("N2")</strong>
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(booking.BookingStatus)">
                                                @booking.BookingStatus
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetPaymentBadgeClass(booking.PaymentStatus)">
                                                @booking.PaymentStatus
                                            </span>
                                        </td>
                                        <td>
                                            @booking.BookingDate.ToString("MMM dd, yyyy")
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("BookingDetails", "Service", new { id = booking.Id })" 
                                                   class="btn btn-sm btn-outline-primary" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a href="@Url.Action("Invoice", "Booking", new { id = booking.Id })" 
                                                   class="btn btn-sm btn-outline-info" title="View Invoice" target="_blank">
                                                    <i class="fas fa-file-invoice"></i>
                                                </a>
                                                @if (booking.BookingStatus == "Pending")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" 
                                                            onclick="updateBookingStatus(@booking.Id, 'Confirmed')" title="Confirm">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                @if (booking.BookingStatus == "Confirmed")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-warning" 
                                                            onclick="updateBookingStatus(@booking.Id, 'In Progress')" title="Start Service">
                                                        <i class="fas fa-play"></i>
                                                    </button>
                                                }
                                                @if (booking.BookingStatus == "In Progress")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" 
                                                            onclick="updateBookingStatus(@booking.Id, 'Completed')" title="Complete">
                                                        <i class="fas fa-flag-checkered"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    @if (Model.Bookings.Count() > 0)
                    {
                        <nav aria-label="Booking pagination">
                            <ul class="pagination justify-content-center">
                                @if (Model.HasPreviousPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Bookings", new { page = Model.PageIndex - 1 })">Previous</a>
                                    </li>
                                }
                                
                                @for (int i = Math.Max(1, Model.PageIndex - 2); i <= Math.Min(Model.TotalPages, Model.PageIndex + 2); i++)
                                {
                                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Bookings", new { page = i })">@i</a>
                                    </li>
                                }
                                
                                @if (Model.HasNextPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Bookings", new { page = Model.PageIndex + 1 })">Next</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function applyFilters() {
            const statusFilter = document.getElementById('statusFilter').value;
            const paymentFilter = document.getElementById('paymentFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;
            
            const rows = document.querySelectorAll('#bookingsTable tbody tr');
            
            rows.forEach(row => {
                let show = true;
                
                if (statusFilter && row.dataset.status !== statusFilter) {
                    show = false;
                }
                
                if (paymentFilter && row.dataset.payment !== paymentFilter) {
                    show = false;
                }
                
                if (dateFilter && row.dataset.date !== dateFilter) {
                    show = false;
                }
                
                row.style.display = show ? '' : 'none';
            });
        }
        
        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('paymentFilter').value = '';
            document.getElementById('dateFilter').value = '';
            
            const rows = document.querySelectorAll('#bookingsTable tbody tr');
            rows.forEach(row => {
                row.style.display = '';
            });
        }
        
        function updateBookingStatus(bookingId, newStatus) {
            console.log('updateBookingStatus called with bookingId:', bookingId, 'newStatus:', newStatus);
            
            if (confirm(`Are you sure you want to change the status to "${newStatus}"?`)) {
                // Show loading state
                const button = event.target;
                const originalText = button.textContent;
                button.textContent = 'Updating...';
                button.disabled = true;
                
                console.log('Making request to:', '@Url.Action("UpdateBookingStatus", "Service")');
                
                fetch('@Url.Action("UpdateBookingStatus", "Service")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        bookingId: bookingId,
                        status: newStatus
                    })
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        alert('Status updated successfully!');
                        location.reload();
                    } else {
                        alert('Error updating status: ' + data.message);
                        // Reset button
                        button.textContent = originalText;
                        button.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the status: ' + error.message);
                    // Reset button
                    button.textContent = originalText;
                    button.disabled = false;
                });
            }
        }
    </script>
}

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Confirmed" => "bg-info",
            "In Progress" => "bg-primary",
            "Completed" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private string GetPaymentBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Paid" => "bg-success",
            "Failed" => "bg-danger",
            "Pending Verification" => "bg-info",
            _ => "bg-secondary"
        };
    }
}