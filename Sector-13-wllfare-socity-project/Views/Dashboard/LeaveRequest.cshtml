@model Sector_13_Welfare_Society___Digital_Management_System.Models.LeaveRequestViewModel
@{
    ViewData["Title"] = "Leave Request";
    Layout = "_DashboardLayout";
    var leaveTypes = ViewBag.LeaveTypes as List<string>;
}

<div class="container-fluid py-2">
    <div class="row g-3">
        <div class="col-lg-8">
            <!-- Leave Request Form -->
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-calendar-plus"></i> Submit Leave Request
                    </h5>
                    <small>Request time off according to your leave balances</small>
                </div>
                <div class="card-body p-3">
                    
                    @if (TempData["LeaveSuccess"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show">
                            <i class="fas fa-check-circle"></i> @TempData["LeaveSuccess"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show">
                            <i class="fas fa-exclamation-triangle"></i> @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    
                    @if (TempData["Warning"] != null)
                    {
                        <div class="alert alert-warning alert-dismissible fade show">
                            <i class="fas fa-exclamation-circle"></i> @TempData["Warning"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger" role="alert">
                            <h6><i class="fas fa-exclamation-triangle"></i> Please correct the following errors:</h6>
                            <div asp-validation-summary="All"></div>
                        </div>
                    }
                    
                    <form asp-action="LeaveRequest" method="post" class="needs-validation" novalidate>
                        
                        <!-- Employee Information -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label"><strong>Employee Name:</strong></label>
                                <p class="form-control-plaintext mb-2">@Model?.EmployeeName</p>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label"><strong>Employee ID:</strong></label>
                                <p class="form-control-plaintext mb-2">@Model?.EmployeeId</p>
                            </div>
                        </div>
                        
                        <hr class="my-3">
                        
                        <!-- Leave Request Details -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="LeaveType" class="form-label">Leave Type <span class="text-danger">*</span></label>
                                <select asp-for="LeaveType" class="form-select" required id="leaveTypeSelect">
                                    <option value="">-- Select Leave Type --</option>
                                    @if (leaveTypes != null)
                                    {
                                        foreach (var type in leaveTypes)
                                        {
                                            <option value="@type">@type</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="LeaveType" class="text-danger"></span>
                                <div id="leaveBalance" class="form-text"></div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="NumberOfDays" class="form-label">Number of Days <span class="text-danger">*</span></label>
                                <input asp-for="NumberOfDays" type="number" class="form-control" min="1" max="365" required id="numberOfDays">
                                <span asp-validation-for="NumberOfDays" class="text-danger"></span>
                                <div class="form-text">Will be auto-calculated if you select dates</div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="StartDate" class="form-label">Start Date <span class="text-danger">*</span></label>
                                <input asp-for="StartDate" type="date" class="form-control" required id="startDate" min="@DateTime.Today.ToString("yyyy-MM-dd")">
                                <span asp-validation-for="StartDate" class="text-danger"></span>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label asp-for="EndDate" class="form-label">End Date <span class="text-danger">*</span></label>
                                <input asp-for="EndDate" type="date" class="form-control" required id="endDate" min="@DateTime.Today.ToString("yyyy-MM-dd")">
                                <span asp-validation-for="EndDate" class="text-danger"></span>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="Reason" class="form-label">Reason for Leave <span class="text-danger">*</span></label>
                            <textarea asp-for="Reason" class="form-control" rows="3" required placeholder="Please provide a detailed reason for your leave request..."></textarea>
                            <span asp-validation-for="Reason" class="text-danger"></span>
                        </div>
                        
                        <!-- Submit Buttons -->
                        <div class="d-flex justify-content-between">
                            <a href="@Url.Action("Member")" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to Dashboard
                            </a>
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-paper-plane"></i> Submit Leave Request
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <!-- Leave Balance Summary -->
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie"></i> Your Leave Balances (@DateTime.Now.Year)
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (Model?.LeaveBalances != null && Model.LeaveBalances.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Leave Type</th>
                                        <th class="text-center">Entitled</th>
                                        <th class="text-center">Used</th>
                                        <th class="text-center">Pending</th>
                                        <th class="text-center">Remaining</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var balance in Model.LeaveBalances)
                                    {
                                        <tr data-leave-type="@balance.LeaveType">
                                            <td><strong>@balance.LeaveType</strong></td>
                                            <td class="text-center">
                                                <span class="badge bg-primary">@balance.TotalEntitled</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-success">@balance.Used</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-warning">@balance.Pending</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge @(balance.Remaining > 0 ? "bg-info" : "bg-danger")">@balance.Remaining</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 text-center text-muted">
                            <i class="fas fa-info-circle"></i> No leave balances found. Contact HR to set up your leave entitlements.
                        </div>
                    }
                </div>
            </div>
            
            <!-- Leave Guidelines -->
            <div class="card shadow-sm mt-4">
                <div class="card-header bg-success text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-info-circle"></i> Leave Guidelines
                    </h6>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0 small">
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i> 
                            Submit requests at least 24 hours in advance
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i> 
                            Emergency leave can be applied retroactively with proper documentation
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i> 
                            Annual leave expires at end of year unless carried forward
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i> 
                            Manager approval required for all leave requests
                        </li>
                        <li class="mb-0">
                            <i class="fas fa-check text-success"></i> 
                            Check your remaining balance before applying
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.badge {
    font-size: 0.9rem;
    padding: 0.4rem 0.6rem;
}

.card {
    border: none;
    border-radius: 10px;
}

.table > tbody > tr > td {
    vertical-align: middle;
}

.table > tbody > tr:hover {
    background-color: #f8f9fa;
}

.form-control:focus,
.form-select:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
}

#leaveBalance {
    font-weight: 500;
    font-size: 0.9rem;
}

.alert {
    border-radius: 8px;
}
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            var leaveBalances = @Html.Raw(Json.Serialize(Model?.AvailableBalances ?? new Dictionary<string, int>()));

            // Enhance option labels with remaining counts
            (function annotateOptions() {
                var select = $('#leaveTypeSelect');
                select.find('option').each(function() {
                    var val = $(this).val();
                    if (!val) return; // skip placeholder
                    if (leaveBalances[val] !== undefined) {
                        var remaining = leaveBalances[val];
                        var baseText = val;
                        // Remove any existing annotation to avoid duplication
                        baseText = baseText.replace(/\s*\(Available:.*\)$/i, '');
                        $(this).text(baseText + ' (Available: ' + remaining + ')');
                    }
                });
            })();
            
            // Update leave balance display when leave type changes
            $('#leaveTypeSelect').on('change', function() {
                var selectedType = $(this).val();
                var balanceDiv = $('#leaveBalance');
                
                if (selectedType && leaveBalances[selectedType] !== undefined) {
                    var remaining = leaveBalances[selectedType];
                    var colorClass = remaining > 0 ? 'text-success' : 'text-danger';
                    var icon = remaining > 0 ? 'fa-check-circle' : 'fa-exclamation-triangle';
                    
                    balanceDiv.html(`
                        <i class="fas ${icon} ${colorClass}"></i> 
                        <strong class="${colorClass}">Available: ${remaining} days</strong>
                    `);
                    
                    // Highlight the corresponding row in the balance table
                    $('.table tbody tr').removeClass('table-active');
                    $(`.table tbody tr[data-leave-type="${selectedType}"]`).addClass('table-active');
                } else {
                    balanceDiv.html('');
                    $('.table tbody tr').removeClass('table-active');
                }
            });
            
            // Auto-calculate days when dates change
            function calculateDays() {
                var startDate = new Date($('#startDate').val());
                var endDate = new Date($('#endDate').val());
                
                if (startDate && endDate && endDate >= startDate) {
                    var timeDiff = endDate.getTime() - startDate.getTime();
                    var daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;
                    $('#numberOfDays').val(daysDiff);
                }
            }
            
            $('#startDate, #endDate').on('change', calculateDays);

            // Initialize dropdown annotations and balance display on load
            annotateOptions();
            $('#leaveTypeSelect').trigger('change');
            
            // Validate leave balance before submission
            $('form').on('submit', function(e) {
                var selectedType = $('#leaveTypeSelect').val();
                var requestedDays = parseInt($('#numberOfDays').val()) || 0;
                var startDate = new Date($('#startDate').val());
                var endDate = new Date($('#endDate').val());
                var reason = $('#Reason').val().trim();
                
                // Clear any previous custom error messages
                $('.custom-error').remove();
                
                var hasErrors = false;
                
                // Validate required fields
                if (!selectedType) {
                    showFieldError('#leaveTypeSelect', 'Please select a leave type');
                    hasErrors = true;
                }
                
                if (requestedDays <= 0) {
                    showFieldError('#numberOfDays', 'Number of days must be greater than 0');
                    hasErrors = true;
                }
                
                if (!reason) {
                    showFieldError('#Reason', 'Please provide a reason for your leave');
                    hasErrors = true;
                }
                
                // Validate dates
                if (startDate && endDate && startDate > endDate) {
                    showFieldError('#endDate', 'End date must be after start date');
                    hasErrors = true;
                }
                
                if (startDate && startDate < new Date().setHours(0,0,0,0)) {
                    showFieldError('#startDate', 'Start date cannot be in the past');
                    hasErrors = true;
                }
                
                // Validate leave balance
                if (selectedType && leaveBalances[selectedType] !== undefined) {
                    var available = leaveBalances[selectedType];
                    
                    if (requestedDays > available) {
                        showFieldError('#numberOfDays', `Insufficient ${selectedType} balance. You have ${available} days available but requested ${requestedDays} days.`);
                        hasErrors = true;
                    }
                }
                
                if (hasErrors) {
                    e.preventDefault();
                    // Scroll to first error
                    var firstError = $('.custom-error').first();
                    if (firstError.length) {
                        $('html, body').animate({
                            scrollTop: firstError.offset().top - 100
                        }, 500);
                    }
                    return false;
                }
            });
            
            function showFieldError(fieldSelector, message) {
                var field = $(fieldSelector);
                field.addClass('is-invalid');
                
                // Remove existing error for this field
                field.siblings('.custom-error').remove();
                
                // Add new error message
                field.after(`<div class="invalid-feedback custom-error">${message}</div>`);
            }
            
            // Clear field errors when user starts typing/selecting
            $('input, select, textarea').on('input change', function() {
                $(this).removeClass('is-invalid');
                $(this).siblings('.custom-error').remove();
            });
            
            // Bootstrap form validation
            (function() {
                'use strict';
                window.addEventListener('load', function() {
                    var forms = document.getElementsByClassName('needs-validation');
                    var validation = Array.prototype.filter.call(forms, function(form) {
                        form.addEventListener('submit', function(event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
        });
    </script>
}